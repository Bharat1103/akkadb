(path("ElevationService" / DoubleNumber / DoubleNumber) & entity(as[ScriveRequest])) {
  (long, lat, scriveRequest) => ...


httpie documentation -  https://httpie.org/doc

http POST


Testing get and Post requets at the prompt
At term promt go to project directory
http POST localhost:2551/demo-db
http GET localhost:2551/demo-db



http://localhost:2551/hello


GET request query string
http://localhost:2551/customer?name=name

https://doc.akka.io/docs/akka-stream-and-http-experimental/snapshot/scala/http/common/json-support.html
 https://doc.akka.io/docs/akka-http/current/server-side/graceful-termination.html
def stop(): Unit = {
    materializer.shutdown()
    Await.result(system.terminate(), Duration.Inf)
  }


https://dzone.com/articles/akka-notes-actorsystem
So, when we create the ActorSystem using the ActorSystem object's apply method without specifying any configuration, it looks out
for application.conf, application.json and application.properties in the root of the classpath and loads them automatically.


HTTP latest version 10.1.X

latest release is 10.1.3 in June 2018


"com.typesafe.akka" %% "akka-stream" % "2.5.11"

Akka HTTP light bends example
https://developer.lightbend.com/guides/akka-http-quickstart-scala/running-the-application.html

Scala Testing links ==>
https://lucianomolinari.com/2016/08/07/testing-future-objects-scalatest/




Learning links====>

https://developer.lightbend.com/blog/2017-05-17-atotm-clustering-and-remoting/index.html

https://www.youtube.com/watch?v=uxQta776jJI


Scala HTTP project explanation
https://developer.lightbend.com/guides/akka-http-quickstart-scala/

Akka qucickstart
https://developer.lightbend.com/start/?group=akka&project=akka-quickstart-scala

Simple actor example
https://alvinalexander.com/scala/simple-scala-akka-actor-examples-hello-world-actors


sbt "runMain trial.MyActors"

Typed Actors (good starting point)
https://www.youtube.com/watch?v=k9rwU8G1Oi0

Typed actor and ask patter example
http://www.smartjava.org/content/akka-typed-first-steps-typed-actors-scala

Future and ask pattern
https://alvinalexander.com/scala/scala-akka-futures-example-simple-working

Creating typed actors
https://doc.akka.io/docs/akka/2.5/typed-actors.html#when-to-use-typed-actors

Payment processing example v good.
https://manuel.bernhardt.io/2018/01/03/tour-akka-cluster-akka-distributed-data/

Typed aka code on git
https://github.com/patriknw/akka-typed-blog/commit/ff9365072df9bd78f179c3cbe36d71114cca6f96

Typed blog examples â€” used counter from here
https://github.com/patriknw/akka-typed-blog/tree/master/src/main/scala/blog/typed/cluster/scaladsl

Maven repository
https://mvnrepository.com/artifact/com.typesafe.akka/akka-distributed-data/usages?p=3

Read when hv time about typed actors
https://www.youtube.com/watch?v=o0gtpLgI8Mw
https://akka.io/blog/news/2018/02/23/akka-2.5.10-released

Take a look at this later
http://www.waitingforcode.com/akka/akka-distributed-data-module/read

Light weight session programming in Scala
https://spiral.imperial.ac.uk/handle/10044/1/41760

Evolution of typed actors (session types)
https://www.bbva.com/en/akka-actors-evolution-type-safe-distributed-computations/


https://doc.akka.io/docs/akka/2.5/typed/interaction-patterns.html

Git link to ask pattern for between actor systems
https://github.com/akka/akka/tree/master/akka-docs/src/main/paradox/typed

MA
https://github.com/mushtaq/cqrs/blob/master/client/src/main/scala/client/Main.scala


Ask pattern example
https://www.programcreek.com/scala/akka.pattern.ask

Google query string
akka-cluster-typed AND actor systems AND ask pattern example

https://alvinalexander.com/scala/akka-actor-how-to-send-message-wait-for-reply-ask

